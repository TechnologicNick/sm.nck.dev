import { EResult } from "steam-user";
import config from "utils/config";
import { FileId } from "../types";
import { getAllFileIds } from "./descriptions";

export const publishedFileDetails = new Map<FileId, Readonly<PublishedFileDetails>>();

const fetchPublishedFileDetails = async (fileIds: FileId[]) => {
  const formData = new FormData();
  formData.append("key", config.STEAM_API_KEY);
  formData.append("itemcount", fileIds.length.toString());
  for (let i = 0; i < fileIds.length; i++) {
    formData.append(`publishedfileids[${i}]`, fileIds[i].toString());
  }

  const response = await fetch(`https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/`, {
    method: "POST",
    body: formData,
  });
  const publishedFileDetails = (await response.json()).response.publishedfiledetails as PublishedFileDetails[];
  return publishedFileDetails;
}

export const reloadPublishedFileDetails = async () => {
  const fileIds = getAllFileIds();

  const batchSize = 10;
  const batches: FileId[][] = [];
  for (let i = 0; i < fileIds.length; i += batchSize) {
    batches.push(fileIds.slice(i, i + batchSize));
    break;
  }

  const details = await Promise.all(batches.map(batch => fetchPublishedFileDetails(batch)))
    .then(batches => batches.flat());

  publishedFileDetails.clear();

  for (const publishedFileDetail of details) {
    if (publishedFileDetail.result === EResult.OK) {
      publishedFileDetails.set(Number(publishedFileDetail.publishedfileid), publishedFileDetail);
    }
  }
}

// Generated by https://quicktype.io

export type PublishedFileDetails = {
  publishedfileid:        `${FileId}`;
  result:                 EResult.OK;
  creator:                `${number}`;
  creator_app_id:         number;
  consumer_app_id:        number;
  filename:               string;
  file_size:              number;
  file_url:               string;
  hcontent_file:          string;
  preview_url:            string;
  hcontent_preview:       `${number}`;
  title:                  string;
  description:            string;
  time_created:           number;
  time_updated:           number;
  visibility:             number;
  banned:                 number;
  ban_reason:             string;
  subscriptions:          number;
  favorited:              number;
  lifetime_subscriptions: number;
  lifetime_favorited:     number;
  views:                  number;
  tags:                   Tag[];
}

export interface Tag {
  tag: string;
}
